[{"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js":"1","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js":"2","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js":"3","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js":"4","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js":"5","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js":"6","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js":"7"},{"size":259,"mtime":1609754433247,"results":"8","hashOfConfig":"9"},{"size":2583,"mtime":1609754433247,"results":"10","hashOfConfig":"9"},{"size":2441,"mtime":1609754433247,"results":"11","hashOfConfig":"9"},{"size":4979,"mtime":1611596252021,"results":"12","hashOfConfig":"9"},{"size":1251,"mtime":1611571700562,"results":"13","hashOfConfig":"9"},{"size":4054,"mtime":1611596244749,"results":"14","hashOfConfig":"9"},{"size":3366,"mtime":1611594368024,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cyt81b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js",***REMOVED***,"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js",***REMOVED***,"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js",***REMOVED***,"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js",["33","34","35","36","37"],"import React, { useState, useRef } from 'react'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_CART } from '../graphql/Queries'\r\nimport { PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport { Button } from './Button'\r\n\r\nfunction CartQuery(props) {\r\n\r\n    const { loading, error, data } = useQuery(GET_CART)\r\n    console.log(data)\r\n    if (data) { props.setCart(data)}\r\n\r\n    const [removeFromCart, \r\n        { loading: mutationLoadingRemove, error: mutationErrorRemove }] = useMutation(REMOVE_FROM_CART, {\r\n        update: updateCartWithRemovedEntry\r\n    })\r\n\r\n    const [updateQuantity, \r\n        { loading: mutationLoadingUpdate, error: mutationErrorUpdate }] = useMutation(UPDATE_QUANTITY, {\r\n            update: updateCartWithUpdatedEntry\r\n    })\r\n\r\n    function updateCartWithRemovedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart(existingCart = ***REMOVED***) {\r\n                    const newCart = data.deleteCartItemById.cart\r\n                    console.log(newCart)\r\n                    console.log(...existingCart)\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithUpdatedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart(existingCart = ***REMOVED***) {\r\n                    const newCart = data.updateCartItemQuantityById.cart\r\n                    console.log(newCart)\r\n                    console.log(...existingCart)\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    const [highlight, setHighlight] = useState()\r\n    let refContainers = useRef(***REMOVED***)\r\n\r\n    refContainers.current = [0,0,0].map(\r\n        (ref, index) => refContainers.current[index] = React.createRef()\r\n    )\r\n\r\n    function selectSize(size) {\r\n        for (var i = 0; i < refContainers.current.length; i++) {\r\n            refContainers.current[i].className = \"btn btn--size btn--square\"\r\n        }\r\n        refContainers.current[size].className = \"btn btn--size btn--square btn--select\"\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var parent = event.target.parentElement.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(parent)\r\n        console.log(typeof(parent))\r\n        await removeFromCart({ variables: {\r\n            idProvided: parent\r\n        }})\r\n    }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    if (loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (mutationLoadingRemove || mutationLoadingUpdate) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    if (error || mutationErrorRemove || mutationErrorUpdate) return <h1>Error! ${props.error}</h1>\r\n    if (data.allCart.length == 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n\r\n    return (\r\n        data.allCart.map((product, index) => (\r\n            <div className=\"cart-products\"\r\n            key={index} data-key={product.id}>\r\n                <div className=\"cart-product\">\r\n                    <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                    <span className=\"cart-name\">{product.name}</span>\r\n                </div>\r\n                <div className=\"cart-size\">\r\n                    <Button ref={(Button) => refContainers.current[0] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(0)}>S</Button>\r\n                    <Button ref={(Button) => refContainers.current[1] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(1)}>M</Button>\r\n                    <Button ref={(Button) => refContainers.current[2] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(2)}>L</Button>\r\n                </div>\r\n                <div className=\"cart-quantity\">\r\n                    <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                    <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</Button>\r\n                </div>\r\n                <span className=\"cart-price\">Â£{(product.price * product.quantity).toFixed(2)}</span>\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js",***REMOVED***,"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js",["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"import React, { useState, useEffect, useRef, useMemo, useLayoutEffect } from 'react'\r\nimport './MerchCart.css'\r\nimport { Button } from './Button'\r\nimport MerchQuery from './MerchQuery'\r\nimport CartQuery from './CartQuery'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_MERCH, GET_CART } from '../graphql/Queries'\r\nimport { ADD_TO_CART, PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nfunction MerchCart() {\r\n\r\n    const [purchaseCart, \r\n        { loading: mutationLoadingPurchase, error: mutationErrorPurchase}] = useMutation(PURCHASE_CART, {\r\n            update: updateCartWithPurchase\r\n    })\r\n\r\n    function updateCartWithPurchase(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart(existingCart = ***REMOVED***) {\r\n                    const newCart = data.purchaseCart.cart\r\n                    console.log(newCart)\r\n                    console.log(...existingCart)\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    const [total, setTotal] = useState(0)\r\n    const [cart, setCart] = useState(***REMOVED***)\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        if (cart.length !== 0) {\r\n            var calculateTotal = cart.allCart.map(cartEntry => {\r\n                total += cartEntry.quantity * cartEntry.price\r\n            })\r\n        }\r\n        setTotal(total.toFixed(2))\r\n    }, [cart])\r\n\r\n    function purchaseMessage() {\r\n        purchaseCart()\r\n        alert(\"Purchase Completed\")\r\n    }\r\n\r\n    let x = 3\r\n    \r\n\r\n    function checkMerchQuery() {\r\n        if (x == 4) {\r\n            return <h1 className=\"empty-cart\">Server Offline</h1>\r\n        } else {\r\n            return <MerchQuery />\r\n        }\r\n    }\r\n\r\n    function checkCartQuery() {\r\n        if (x == 4) {\r\n            return <h1 className=\"empty-cart\">Server Offline</h1>\r\n        } else {\r\n            return <CartQuery setCart={setCart} />\r\n        }\r\n    }\r\n\r\n    onError(({ graphQLErrors, networkError }) => {\r\n        if (graphQLErrors)\r\n            graphQLErrors.map(({ message, locations, path }) =>\r\n            console.log(\r\n                `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n            ),\r\n        );\r\n        if (networkError) console.log(`[Network error]: ${networkError}`);\r\n    });\r\n\r\n    // save scroll position\r\n\r\n    return (\r\n        <>\r\n        <div className=\"merch-background\">\r\n            <div className=\"merch-wrapper\">\r\n            <h1 className=\"merch-header\">MERCH</h1>\r\n                <div className=\"merch-section\">\r\n                    <div className=\"scroll-box-merch\">\r\n                        {checkMerchQuery()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"cart-background\">\r\n            <div className=\"cart-wrapper\">\r\n            <h1 className=\"cart-header\">CART</h1>\r\n                <div className=\"cart-section\">\r\n                    <div className=\"cart-headers\">\r\n                        <span className=\"cart-header-product\">PRODUCT</span>\r\n                        <span>SIZE</span>\r\n                        <span>QUANTITY</span>\r\n                        <span className=\"cart-header-price\">PRICE</span>\r\n                    </div>\r\n                    <div className=\"scroll-box-cart\"> \r\n                        {checkCartQuery()}\r\n                    </div>\r\n                    <div className=\"total-row\">\r\n                        <span className=\"total-name\">Total</span>\r\n                        <span className=\"total-price\">Â£{total}</span>\r\n                        <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={purchaseMessage}>PURCHASE</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MerchCart\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js",["53","54","55","56","57"],"import React, { useRef, useMemo, useLayoutEffect } from 'react'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_MERCH, GET_CART } from '../graphql/Queries'\r\nimport { ADD_TO_CART } from '../graphql/Mutations'\r\nimport { Button } from './Button'\r\n\r\nfunction MerchQuery(props) {\r\n\r\n    const { loading, error, data, refetch, networkStatus } = useQuery(GET_MERCH)\r\n    console.log(data)\r\n\r\n    const [addToCart,\r\n        { loading: mutationLoadingAdd, error: mutationErrorAdd }] = useMutation(ADD_TO_CART, {\r\n        update: updateCartWithNewEntry\r\n    })\r\n\r\n    function updateCartWithNewEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart(existingCart = ***REMOVED***) {\r\n                    const newCart = data.addToCart.cart\r\n                    console.log(newCart)\r\n                    console.log(...existingCart)\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                    console.log(cache.data)\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    async function checkId(event) {\r\n        var parent = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(parent)\r\n        console.log(typeof(parent))\r\n        await addToCart({ variables: {\r\n            idProvided: parent\r\n        }})\r\n    }\r\n\r\n    // const findFirstElementInViewPort = elements =>\r\n    // Array.prototype.find.call(\r\n    //   elements,\r\n    //   element => element.getBoundingClientRect().y >= 85 // nav height offset\r\n    // );\r\n\r\n    // // Ref to the container with elements\r\n    // const containerRef = useRef(null);\r\n\r\n    // const scrollTo = useMemo(() => {\r\n    //     // Find all elements in container which will be checked if are in view or not\r\n    //     const nodeElements = containerRef.current?.querySelectorAll(\"[data-item]\");\r\n    //     if (nodeElements) {\r\n    //         return findFirstElementInViewPort(nodeElements);\r\n    //     }\r\n    //     return undefined;\r\n    // }, [props.data]);\r\n\r\n    // useLayoutEffect(() => {\r\n    //     if (scrollTo) {\r\n    //         // Scroll to element with should be in view after rendering\r\n    //         scrollTo.scrollIntoView();\r\n    //         // Scroll by height of nav\r\n    //         window.scrollBy(0, -85);\r\n    //     }\r\n    // }, [scrollTo, props.data]);\r\n\r\n    if (networkStatus === 4) return <h1>Refetching</h1>\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (mutationLoadingAdd) return <h1 classname=\"empty-cart\">Adding To Cart...</h1>\r\n    if (error || mutationErrorAdd) return <h1>Error! ${error}</h1>\r\n    if (data.allMerch.length === 0) return <h1 className=\"empty-cart\">Your Cart is Empty</h1>\r\n\r\n    return (\r\n        data.allMerch.map((merch, index) => (\r\n            <div className=\"merch-product\" key={index} data-key={merch.id} data-item=\"true\">\r\n                <img className=\"merch-image\" alt=\"Merch\" src={merch.src}></img>\r\n                <div className=\"merch-info\">\r\n                    <span>{merch.name}</span>\r\n                    <span>Â£{merch.price}</span>\r\n                </div>\r\n                <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={checkId}>ADD TO CART</Button>\r\n            </div> \r\n        ))\r\n    )\r\n}\r\n\r\nexport default MerchQuery\r\n",{"ruleId":"58","severity":1,"message":"59","line":2,"column":33,"nodeType":"60","messageId":"61","endLine":2,"endColumn":45},{"ruleId":"58","severity":1,"message":"62","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":23},{"ruleId":"58","severity":1,"message":"63","line":55,"column":12,"nodeType":"60","messageId":"61","endLine":55,"endColumn":21},{"ruleId":"58","severity":1,"message":"64","line":55,"column":23,"nodeType":"60","messageId":"61","endLine":55,"endColumn":35},{"ruleId":"65","severity":1,"message":"66","line":95,"column":29,"nodeType":"67","messageId":"68","endLine":95,"endColumn":31},{"ruleId":"58","severity":1,"message":"69","line":1,"column":38,"nodeType":"60","messageId":"61","endLine":1,"endColumn":44},{"ruleId":"58","severity":1,"message":"70","line":1,"column":46,"nodeType":"60","messageId":"61","endLine":1,"endColumn":53},{"ruleId":"58","severity":1,"message":"71","line":1,"column":55,"nodeType":"60","messageId":"61","endLine":1,"endColumn":70},{"ruleId":"58","severity":1,"message":"72","line":6,"column":10,"nodeType":"60","messageId":"61","endLine":6,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":6,"column":33,"nodeType":"60","messageId":"61","endLine":6,"endColumn":45},{"ruleId":"58","severity":1,"message":"73","line":7,"column":10,"nodeType":"60","messageId":"61","endLine":7,"endColumn":19},{"ruleId":"58","severity":1,"message":"74","line":8,"column":10,"nodeType":"60","messageId":"61","endLine":8,"endColumn":21},{"ruleId":"58","severity":1,"message":"75","line":8,"column":38,"nodeType":"60","messageId":"61","endLine":8,"endColumn":54},{"ruleId":"58","severity":1,"message":"76","line":8,"column":56,"nodeType":"60","messageId":"61","endLine":8,"endColumn":71},{"ruleId":"58","severity":1,"message":"77","line":14,"column":20,"nodeType":"60","messageId":"61","endLine":14,"endColumn":43},{"ruleId":"58","severity":1,"message":"78","line":14,"column":52,"nodeType":"60","messageId":"61","endLine":14,"endColumn":73},{"ruleId":"58","severity":1,"message":"79","line":40,"column":17,"nodeType":"60","messageId":"61","endLine":40,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":40,"column":61,"nodeType":"82","messageId":"83","endLine":40,"endColumn":63},{"ruleId":"65","severity":1,"message":"66","line":56,"column":15,"nodeType":"67","messageId":"68","endLine":56,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":64,"column":15,"nodeType":"67","messageId":"68","endLine":64,"endColumn":17},{"ruleId":"58","severity":1,"message":"69","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":23},{"ruleId":"58","severity":1,"message":"70","line":1,"column":25,"nodeType":"60","messageId":"61","endLine":1,"endColumn":32},{"ruleId":"58","severity":1,"message":"71","line":1,"column":34,"nodeType":"60","messageId":"61","endLine":1,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":2,"column":33,"nodeType":"60","messageId":"61","endLine":2,"endColumn":45},{"ruleId":"58","severity":1,"message":"84","line":9,"column":35,"nodeType":"60","messageId":"61","endLine":9,"endColumn":42},"no-unused-vars","'useLazyQuery' is defined but never used.","Identifier","unusedVar","'PURCHASE_CART' is defined but never used.","'highlight' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'useMemo' is defined but never used.","'useLayoutEffect' is defined but never used.","'useQuery' is defined but never used.","'GET_MERCH' is defined but never used.","'ADD_TO_CART' is defined but never used.","'REMOVE_FROM_CART' is defined but never used.","'UPDATE_QUANTITY' is defined but never used.","'mutationLoadingPurchase' is assigned a value but never used.","'mutationErrorPurchase' is assigned a value but never used.","'calculateTotal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'refetch' is assigned a value but never used."]