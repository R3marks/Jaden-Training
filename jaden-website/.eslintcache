[{"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\AppRouter.js":"1","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\SignUp.js":"2","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\Home.js":"3","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\Merch.js":"4","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\MerchSection.js":"5","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\LinkedButton.js":"6","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Chapter.js":"7","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\ActionButton.js":"8","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\CartQuery.js":"9","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\SignUp.js":"10","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\SignIn.js":"11","T:\\Code\\CSS\\Learning\\jaden-website\\src\\App.js":"12","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\AuthProvider.js":"13","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\useAppInit.js":"14","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Video.js":"15","T:\\Code\\CSS\\Learning\\jaden-website\\src\\graphql\\Queries.js":"16","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Profile.js":"17","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\TourQuery.js":"18","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Unauthenticated.js":"19"},{"size":988,"mtime":1612615412570,"results":"20","hashOfConfig":"21"},{"size":258,"mtime":1612536231944,"results":"22","hashOfConfig":"21"},{"size":256,"mtime":1608329382449,"results":"23","hashOfConfig":"21"},{"size":523,"mtime":1613144593855,"results":"24","hashOfConfig":"21"},{"size":661,"mtime":1612536231937,"results":"25","hashOfConfig":"21"},{"size":949,"mtime":1612536231924,"results":"26","hashOfConfig":"21"},{"size":2583,"mtime":1608329382440,"results":"27","hashOfConfig":"21"},{"size":694,"mtime":1612536231919,"results":"28","hashOfConfig":"21"},{"size":6823,"mtime":1613144593844,"results":"29","hashOfConfig":"21"},{"size":6403,"mtime":1613303797578,"results":"30","hashOfConfig":"21"},{"size":4441,"mtime":1613313098530,"results":"31","hashOfConfig":"21"},{"size":356,"mtime":1612615384338,"results":"32","hashOfConfig":"21"},{"size":677,"mtime":1613144593829,"results":"33","hashOfConfig":"21"},{"size":758,"mtime":1613144593856,"results":"34","hashOfConfig":"21"},{"size":1846,"mtime":1612536231943,"results":"35","hashOfConfig":"21"},{"size":589,"mtime":1612536231946,"results":"36","hashOfConfig":"21"},{"size":863,"mtime":1613144593850,"results":"37","hashOfConfig":"21"},{"size":1253,"mtime":1612536231942,"results":"38","hashOfConfig":"21"},{"size":856,"mtime":1613306195042,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"c0vyrn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\AppRouter.js",[],["80","81"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\SignUp.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\Home.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\pages\\Merch.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\MerchSection.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\LinkedButton.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Chapter.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\ActionButton.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\CartQuery.js",["82","83","84","85","86","87","88","89"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { GET_CART } from '../graphql/Queries'\r\nimport { PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport ActionButton from './ActionButton'\r\n\r\nfunction CartQuery() {\r\n\r\n    const [errorObject, setErrorObject] = useState({})\r\n    const [sizeArray, setSizeArray] = useState(['', 'btn--select', ''])\r\n    const [total, setTotal] = useState(0)\r\n    const scrollBoxCart = useRef(null)\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        if (data) {\r\n            data.allCart.forEach(cartEntry => {\r\n                total += cartEntry.quantity * cartEntry.price\r\n            })\r\n        }\r\n        setTotal(total.toFixed(2))\r\n    })\r\n\r\n    const { loading, error, data } = useQuery(GET_CART, \r\n        { onError: (errors) => {\r\n            if (errors.message === 'Failed to fetch') {\r\n                setErrorObject({ clientMessage: 'Server Offline'})\r\n            } else {\r\n                console.log(errors)\r\n            }\r\n        }\r\n    })\r\n\r\n    const [removeFromCart, \r\n        { loading: loadRemoveFromCart, error: errorRemoveFromCart }] = useMutation(REMOVE_FROM_CART, {\r\n        update: updateCartWithRemovedEntry\r\n    })\r\n\r\n    const [updateQuantity, \r\n        { loading: loadUpdateQuantity, error: errorUpdateQuantity }] = useMutation(UPDATE_QUANTITY, {\r\n            ignoreResults: true\r\n        })\r\n\r\n    const [purchaseCart, \r\n        { loading: loadPurchaseCart, error: errorPurchaseCart}] = useMutation(PURCHASE_CART, {\r\n            update: updateCartWithPurchase\r\n    })\r\n\r\n    function updateCartWithRemovedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.deleteCartItemById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithUpdatedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.updateCartItemQuantityById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithPurchase(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.purchaseCart.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function selectSize(size) {\r\n        let newSizeArray = ['', '', '']\r\n        newSizeArray[size] = 'btn--select'\r\n        setSizeArray(newSizeArray)\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var prevScrollTop = event.target.parentElement.parentElement.parentElement.scrollTop\r\n        var cartId = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        await removeFromCart({ variables: {\r\n            idProvided: cartId\r\n        }})\r\n        scrollBoxCart.current.scrollTop = prevScrollTop\r\n    }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    function purchaseMessage() {\r\n        purchaseCart()\r\n        alert(\"Purchase Completed\")\r\n    }\r\n\r\n    // Queries need to be handled better. It doesnt make sense to re-render everytime you change the quantity\r\n\r\n    if (loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (error) return <h1 className=\"empty-cart\">{errorObject.clientMessage}</h1>\r\n    // if (loadRemoveFromCart || loadUpdateQuantity) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    // if (error && error.networkError) return <h1 className='empty-cart'>Server Offline</h1>\r\n    // if (error && error.graphQLErrors) return <h1 className=\"empty-cart\">Log in to access cart</h1>\r\n    // if (errorRemoveFromCart || errorUpdateQuantity) return <h1 className=\"empty-cart\">Error! ${JSON.stringify(error, errorRemoveFromCart, errorUpdateQuantity)}</h1>\r\n    // if (data.allCart.length === 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n    // if (loadPurchaseCart) return <h1>Test</h1>\r\n    // if (errorPurchaseCart) return <h1>Test</h1>\r\n\r\n    return (\r\n        <>\r\n        <div ref={scrollBoxCart} className=\"scroll-box-cart\">\r\n            {data.allCart.map((product, index) => (\r\n                <div className=\"cart-products\"\r\n                key={index} data-key={product.id}>\r\n                    <div className=\"cart-product\">\r\n                        <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                        <span className=\"cart-name\">{product.name}</span>\r\n                    </div>\r\n                    <div className=\"cart-size\">\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[0]} onClick={() => selectSize(0)}>S</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[1]} onClick={() => selectSize(1)}>M</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[2]} onClick={() => selectSize(2)}>L</ActionButton>\r\n                    </div>\r\n                    <div className=\"cart-quantity\">\r\n                        <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                        <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</ActionButton>\r\n                    </div>\r\n                    <span className=\"cart-price\">£{(product.price * product.quantity).toFixed(2)}</span>\r\n                </div>\r\n            ))}\r\n        </div>    \r\n        <div className=\"total-row\">\r\n            <span className=\"total-name\">Total</span>\r\n            <span className=\"total-price\">£{total}</span>\r\n            <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={purchaseMessage}>PURCHASE</ActionButton>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n","T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\SignUp.js",["90"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\SignIn.js",["91"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\App.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\AuthProvider.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\useAppInit.js",["92"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Video.js",["93"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\graphql\\Queries.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Profile.js",["94","95"],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\TourQuery.js",[],"T:\\Code\\CSS\\Learning\\jaden-website\\src\\components\\Unauthenticated.js",["96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":14,"column":5,"nodeType":"103","endLine":14,"endColumn":14,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":35,"column":20,"nodeType":"103","messageId":"107","endLine":35,"endColumn":38},{"ruleId":"105","severity":1,"message":"108","line":35,"column":47,"nodeType":"103","messageId":"107","endLine":35,"endColumn":66},{"ruleId":"105","severity":1,"message":"109","line":40,"column":20,"nodeType":"103","messageId":"107","endLine":40,"endColumn":38},{"ruleId":"105","severity":1,"message":"110","line":40,"column":47,"nodeType":"103","messageId":"107","endLine":40,"endColumn":66},{"ruleId":"105","severity":1,"message":"111","line":45,"column":20,"nodeType":"103","messageId":"107","endLine":45,"endColumn":36},{"ruleId":"105","severity":1,"message":"112","line":45,"column":45,"nodeType":"103","messageId":"107","endLine":45,"endColumn":62},{"ruleId":"105","severity":1,"message":"113","line":63,"column":14,"nodeType":"103","messageId":"107","endLine":63,"endColumn":40},{"ruleId":"105","severity":1,"message":"114","line":20,"column":50,"nodeType":"103","messageId":"107","endLine":20,"endColumn":61},{"ruleId":"105","severity":1,"message":"114","line":17,"column":50,"nodeType":"103","messageId":"107","endLine":17,"endColumn":61},{"ruleId":"105","severity":1,"message":"115","line":7,"column":36,"nodeType":"103","messageId":"107","endLine":7,"endColumn":41},{"ruleId":"105","severity":1,"message":"116","line":1,"column":27,"nodeType":"103","messageId":"107","endLine":1,"endColumn":33},{"ruleId":"105","severity":1,"message":"117","line":10,"column":27,"nodeType":"103","messageId":"107","endLine":10,"endColumn":34},{"ruleId":"105","severity":1,"message":"115","line":10,"column":36,"nodeType":"103","messageId":"107","endLine":10,"endColumn":41},{"ruleId":"105","severity":1,"message":"118","line":1,"column":27,"nodeType":"103","messageId":"107","endLine":1,"endColumn":37},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.","Identifier",["121"],"no-unused-vars","'loadRemoveFromCart' is assigned a value but never used.","unusedVar","'errorRemoveFromCart' is assigned a value but never used.","'loadUpdateQuantity' is assigned a value but never used.","'errorUpdateQuantity' is assigned a value but never used.","'loadPurchaseCart' is assigned a value but never used.","'errorPurchaseCart' is assigned a value but never used.","'updateCartWithUpdatedEntry' is defined but never used.","'errorSignIn' is assigned a value but never used.","'error' is assigned a value but never used.","'useRef' is defined but never used.","'loading' is assigned a value but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Add dependencies array: [data]",{"range":"124","text":"125"},[785,785],", [data]"]