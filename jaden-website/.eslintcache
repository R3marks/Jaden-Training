[{"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js":"1","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js":"2","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js":"3","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js":"4","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js":"5","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js":"6","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js":"7"},{"size":259,"mtime":1609754433247,"results":"8","hashOfConfig":"9"},{"size":2583,"mtime":1609754433247,"results":"10","hashOfConfig":"9"},{"size":2441,"mtime":1609754433247,"results":"11","hashOfConfig":"9"},{"size":3481,"mtime":1611566914594,"results":"12","hashOfConfig":"9"},{"size":1251,"mtime":1611571700562,"results":"13","hashOfConfig":"9"},{"size":6815,"mtime":1611578752062,"results":"14","hashOfConfig":"9"},{"size":2407,"mtime":1611592506239,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cyt81b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js",["32","33","34"],"import React, { useState, useRef } from 'react'\r\nimport { Button } from './Button'\r\n\r\nfunction CartQuery(props) {\r\n\r\n    const [highlight, setHighlight] = useState()\r\n    let refContainers = useRef([])\r\n\r\n    refContainers.current = [0,0,0].map(\r\n        (ref, index) => refContainers.current[index] = React.createRef()\r\n    )\r\n\r\n    function selectSize(size) {\r\n        for (var i = 0; i < refContainers.current.length; i++) {\r\n            refContainers.current[i].className = \"btn btn--size btn--square\"\r\n        }\r\n        refContainers.current[size].className = \"btn btn--size btn--square btn--select\"\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var parent = event.target.parentElement.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(parent)\r\n        console.log(typeof(parent))\r\n        await props.removeFromCart({ variables: {\r\n            idProvided: parent\r\n        }})\r\n    }\r\n\r\n    // function selectSize(size) {\r\n    //     console.log(size)\r\n    // }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        props.updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    // function removeProductFromCart() {\r\n    //     console.log('')\r\n    // }\r\n\r\n    // buttonState=\"btn--select\"\r\n\r\n    if (props.loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (props.mutationLoadingRemove || props.mutationLoadingUpdate) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    if (props.error || props.mutationErrorRemove || props.mutationErrorUpdate) return <h1>Error! ${props.error}</h1>\r\n    if (props.data.allCart.length == 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n\r\n    return (\r\n        props.data.allCart.map((product, index) => (\r\n            <div className=\"cart-products\"\r\n            key={index} data-key={product.id}>\r\n                <div className=\"cart-product\">\r\n                    <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                    <span className=\"cart-name\">{product.name}</span>\r\n                </div>\r\n                <div className=\"cart-size\">\r\n                    <Button ref={(Button) => refContainers.current[0] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(0)}>S</Button>\r\n                    <Button ref={(Button) => refContainers.current[1] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(1)}>M</Button>\r\n                    <Button ref={(Button) => refContainers.current[2] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(2)}>L</Button>\r\n                </div>\r\n                <div className=\"cart-quantity\">\r\n                    <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                    <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</Button>\r\n                </div>\r\n                <span className=\"cart-price\">£{(product.price * product.quantity).toFixed(2)}</span>\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js",["35","36","37","38","39","40","41","42","43","44"],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js",["45","46","47"],"import React, { useRef, useMemo, useLayoutEffect } from 'react'\r\nimport { Button } from './Button'\r\n\r\nfunction MerchQuery(props) {\r\n\r\n    async function checkId(event) {\r\n        var parent = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(parent)\r\n        console.log(typeof(parent))\r\n        await props.addToCart({ variables: {\r\n            idProvided: parent\r\n        }})\r\n    }\r\n\r\n    // const findFirstElementInViewPort = elements =>\r\n    // Array.prototype.find.call(\r\n    //   elements,\r\n    //   element => element.getBoundingClientRect().y >= 85 // nav height offset\r\n    // );\r\n\r\n    // // Ref to the container with elements\r\n    // const containerRef = useRef(null);\r\n\r\n    // const scrollTo = useMemo(() => {\r\n    //     // Find all elements in container which will be checked if are in view or not\r\n    //     const nodeElements = containerRef.current?.querySelectorAll(\"[data-item]\");\r\n    //     if (nodeElements) {\r\n    //         return findFirstElementInViewPort(nodeElements);\r\n    //     }\r\n    //     return undefined;\r\n    // }, [props.data]);\r\n\r\n    // useLayoutEffect(() => {\r\n    //     if (scrollTo) {\r\n    //         // Scroll to element with should be in view after rendering\r\n    //         scrollTo.scrollIntoView();\r\n    //         // Scroll by height of nav\r\n    //         window.scrollBy(0, -85);\r\n    //     }\r\n    // }, [scrollTo, props.data]);\r\n\r\n    if (props.networkStatus === 4) return <h1>Refetching</h1>\r\n    if (props.loading) return <h1>Loading...</h1>;\r\n    if (props.mutationLoading) return <h1 classname=\"empty-cart\">Adding To Cart...</h1>\r\n    if (props.error || props.mutationError) return <h1>Error! ${props.error}</h1>\r\n    if (props.data.allMerch.length === 0) return <h1 className=\"empty-cart\">Your Cart is Empty</h1>\r\n\r\n    return (\r\n        props.data.allMerch.map((merch, index) => (\r\n            <div className=\"merch-product\" key={index} data-key={merch.id} data-item=\"true\">\r\n                <img className=\"merch-image\" alt=\"Merch\" src={merch.src}></img>\r\n                <div className=\"merch-info\">\r\n                    <span>{merch.name}</span>\r\n                    <span>£{merch.price}</span>\r\n                </div>\r\n                <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={checkId}>ADD TO CART</Button>\r\n            </div> \r\n        ))\r\n    )\r\n}\r\n\r\nexport default MerchQuery\r\n",{"ruleId":"48","severity":1,"message":"49","line":6,"column":12,"nodeType":"50","messageId":"51","endLine":6,"endColumn":21},{"ruleId":"48","severity":1,"message":"52","line":6,"column":23,"nodeType":"50","messageId":"51","endLine":6,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":56,"column":35,"nodeType":"55","messageId":"56","endLine":56,"endColumn":37},{"ruleId":"48","severity":1,"message":"57","line":1,"column":38,"nodeType":"50","messageId":"51","endLine":1,"endColumn":44},{"ruleId":"48","severity":1,"message":"58","line":1,"column":46,"nodeType":"50","messageId":"51","endLine":1,"endColumn":53},{"ruleId":"48","severity":1,"message":"59","line":1,"column":55,"nodeType":"50","messageId":"51","endLine":1,"endColumn":70},{"ruleId":"48","severity":1,"message":"60","line":6,"column":33,"nodeType":"50","messageId":"51","endLine":6,"endColumn":45},{"ruleId":"61","severity":1,"message":"62","line":15,"column":5,"nodeType":"50","endLine":15,"endColumn":14,"suggestions":"63"},{"ruleId":"48","severity":1,"message":"64","line":18,"column":17,"nodeType":"50","messageId":"51","endLine":18,"endColumn":31},{"ruleId":"65","severity":1,"message":"66","line":18,"column":65,"nodeType":"67","messageId":"68","endLine":18,"endColumn":67},{"ruleId":"48","severity":1,"message":"69","line":25,"column":35,"nodeType":"50","messageId":"51","endLine":25,"endColumn":42},{"ruleId":"48","severity":1,"message":"70","line":47,"column":20,"nodeType":"50","messageId":"51","endLine":47,"endColumn":43},{"ruleId":"48","severity":1,"message":"71","line":47,"column":52,"nodeType":"50","messageId":"51","endLine":47,"endColumn":73},{"ruleId":"48","severity":1,"message":"57","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":23},{"ruleId":"48","severity":1,"message":"58","line":1,"column":25,"nodeType":"50","messageId":"51","endLine":1,"endColumn":32},{"ruleId":"48","severity":1,"message":"59","line":1,"column":34,"nodeType":"50","messageId":"51","endLine":1,"endColumn":49},"no-unused-vars","'highlight' is assigned a value but never used.","Identifier","unusedVar","'setHighlight' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'useMemo' is defined but never used.","'useLayoutEffect' is defined but never used.","'useLazyQuery' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [dataCart] as a second argument to the useEffect Hook.",["72"],"'calculateTotal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'refetch' is assigned a value but never used.","'mutationLoadingPurchase' is assigned a value but never used.","'mutationErrorPurchase' is assigned a value but never used.",{"desc":"73","fix":"74"},"Add dependencies array: [dataCart]",{"range":"75","text":"76"},[864,864],", [dataCart]"]