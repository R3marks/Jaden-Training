[{"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js":"1"},{"size":6009,"mtime":1611768469348,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1cyt81b","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js",["7","8"],"import React, { useEffect, useState } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { GET_CART } from '../graphql/Queries'\r\nimport { PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport { ActionButton } from './ActionButton'\r\n\r\nfunction CartQuery() {\r\n\r\n    const [sizeArray, setSizeArray] = useState([false, true, false])\r\n    const [total, setTotal] = useState(0)\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        if (data) {\r\n            data.allCart.forEach(cartEntry => {\r\n                total += cartEntry.quantity * cartEntry.price\r\n            })\r\n        }\r\n        setTotal(total.toFixed(2))\r\n    })\r\n\r\n    const { loading, error, data } = useQuery(GET_CART)\r\n\r\n    const [removeFromCart, \r\n        { loading: loadRemoveFromCart, error: errorRemoveFromCart }] = useMutation(REMOVE_FROM_CART, {\r\n        update: updateCartWithRemovedEntry\r\n    })\r\n\r\n    const [updateQuantity, \r\n        { loading: loadUpdateQuantity, error: errorUpdateQuantity }] = useMutation(UPDATE_QUANTITY, {\r\n            ignoreResults: true\r\n        })\r\n\r\n    const [purchaseCart, \r\n        { loading: loadPurchaseCart, error: errorPurchaseCart}] = useMutation(PURCHASE_CART, {\r\n            update: updateCartWithPurchase\r\n    })\r\n\r\n    function updateCartWithRemovedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.deleteCartItemById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithUpdatedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.updateCartItemQuantityById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithPurchase(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.purchaseCart.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function selectSize(size) {\r\n        let newSizeArray = [false, false, false]\r\n        newSizeArray[size] = true\r\n        setSizeArray(newSizeArray)\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var cartId = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        await removeFromCart({ variables: {\r\n            idProvided: cartId\r\n        }})\r\n    }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    function purchaseMessage() {\r\n        purchaseCart()\r\n        alert(\"Purchase Completed\")\r\n    }\r\n\r\n    // Queries need to be handled better. It doesnt make sense to re-render everytime you change the quantity\r\n\r\n    if (loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (loadRemoveFromCart || loadUpdateQuantity) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    if (error || errorRemoveFromCart || errorUpdateQuantity) return <h1 className=\"empty-cart\">Error! ${JSON.stringify(error, errorRemoveFromCart, errorUpdateQuantity)}</h1>\r\n    if (data.allCart.length === 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n    if (loadPurchaseCart) return <h1>Test</h1>\r\n    if (errorPurchaseCart) return <h1>Test</h1>\r\n\r\n    return (\r\n        <>\r\n        <div className=\"scroll-box-cart\">\r\n            {data.allCart.map((product, index) => (\r\n                <div className=\"cart-products\"\r\n                key={index} data-key={product.id}>\r\n                    <div className=\"cart-product\">\r\n                        <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                        <span className=\"cart-name\">{product.name}</span>\r\n                    </div>\r\n                    <div className=\"cart-size\">\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[0]} onClick={() => selectSize(0)}>S</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[1]} onClick={() => selectSize(1)}>M</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[2]} onClick={() => selectSize(2)}>L</ActionButton>\r\n                    </div>\r\n                    <div className=\"cart-quantity\">\r\n                        <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                        <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</ActionButton>\r\n                    </div>\r\n                    <span className=\"cart-price\">£{(product.price * product.quantity).toFixed(2)}</span>\r\n                </div>\r\n            ))}\r\n        </div>    \r\n        <div className=\"total-row\">\r\n            <span className=\"total-name\">Total</span>\r\n            <span className=\"total-price\">£{total}</span>\r\n            <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={purchaseMessage}>PURCHASE</ActionButton>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n",{"ruleId":"9","severity":1,"message":"10","line":12,"column":5,"nodeType":"11","endLine":12,"endColumn":14,"suggestions":"12"},{"ruleId":"13","severity":1,"message":"14","line":53,"column":14,"nodeType":"11","messageId":"15","endLine":53,"endColumn":40},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.","Identifier",["16"],"no-unused-vars","'updateCartWithUpdatedEntry' is defined but never used.","unusedVar",{"desc":"17","fix":"18"},"Add dependencies array: [data]",{"range":"19","text":"20"},[682,682],", [data]"]