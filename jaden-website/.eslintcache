[{"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\useAppInit.js":"1","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\ApolloProvider.js":"2","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\App.js":"3","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Auth.js":"4","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Unauthenticated.js":"5","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\SignIn.js":"6","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\SignUp.js":"7","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js":"8","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Profile.js":"9","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Home.js":"10","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Tours.js":"11","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js":"12"},{"size":755,"mtime":1612788238334,"results":"13","hashOfConfig":"14"},{"size":618,"mtime":1612776635627,"results":"15","hashOfConfig":"14"},{"size":356,"mtime":1612776578518,"results":"16","hashOfConfig":"14"},{"size":600,"mtime":1612777647041,"results":"17","hashOfConfig":"14"},{"size":891,"mtime":1612779089808,"results":"18","hashOfConfig":"14"},{"size":3374,"mtime":1612889785578,"results":"19","hashOfConfig":"14"},{"size":5229,"mtime":1612890763517,"results":"20","hashOfConfig":"14"},{"size":2067,"mtime":1612780357120,"results":"21","hashOfConfig":"14"},{"size":863,"mtime":1612781645646,"results":"22","hashOfConfig":"14"},{"size":256,"mtime":1609754433247,"results":"23","hashOfConfig":"14"},{"size":1815,"mtime":1610991271397,"results":"24","hashOfConfig":"14"},{"size":6410,"mtime":1612891854551,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"1cyt81b",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\useAppInit.js",["56"],"import { useContext, useEffect} from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { AuthContext } from './AuthProvider'\r\nimport { USER_INFO } from '../graphql/Mutations'\r\n\r\nfunction useAppInit() {\r\n    const [getUserInfo, { loading, error }] = useMutation(USER_INFO)\r\n    const { setAuthinfo } = useContext(AuthContext)\r\n\r\n    useEffect(() => {\r\n        async function handleSession() {\r\n            try {\r\n                var result = await getUserInfo()\r\n                setAuthinfo({ userData: result.data.userInfo.user })\r\n            } catch (errors) {\r\n                console.log(errors)\r\n            }\r\n        }\r\n        handleSession();\r\n    }, [setAuthinfo, getUserInfo])\r\n\r\n    return loading\r\n}\r\n\r\nexport default useAppInit\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\ApolloProvider.js",["57","58"],"import React, { useContext } from 'react'\r\nimport { ApolloClient, ApolloProvider as Provider, HttpLink, InMemoryCache } from '@apollo/client'\r\nimport { AuthContext } from './AuthProvider'\r\n\r\nfunction ApolloProvider({ children }) {\r\n\r\n    const authContext = useContext(AuthContext)\r\n\tconsole.log(authContext)\r\n\tconst token = authContext.authInfo.token\r\n\t\r\n\tconst client = new ApolloClient({\r\n\t\tcache: new InMemoryCache(),\r\n\t\turi: 'http://localhost:9000/graphql',\r\n\t\tcredentials: \"include\"\r\n    })\r\n    \r\n    return (\r\n        <Provider client={client}>{children}</Provider>\r\n    )\r\n}\r\n\r\nexport default ApolloProvider\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\App.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Auth.js",["59"],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Unauthenticated.js",["60"],"import React, { useState, useContext } from 'react'\r\nimport SignIn from './SignIn'\r\nimport SignUp from './SignUp'\r\n\r\nfunction Unauthenticated() {\r\n\r\n    const [signInMethod, setSignInMethod] = useState(true)\r\n\r\n    function toggleSignInMethod() {\r\n        setSignInMethod(!signInMethod)\r\n        console.log(signInMethod)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"auth-headers\">\r\n            <h1 className={signInMethod ? 'auth-header auth-select' : 'auth-header'} onClick={signInMethod ? toggleSignInMethod : undefined}>SIGN UP</h1>\r\n            <h1 className={signInMethod ? 'auth-header' : 'auth-header auth-select'} onClick={signInMethod ? undefined : toggleSignInMethod}>SIGN IN</h1>\r\n        </div>\r\n        <div className=\"auth-section\">\r\n            {signInMethod ? <SignIn /> : <SignUp />}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Unauthenticated\r\n",["61","62"],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\SignIn.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\SignUp.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Profile.js",["63","64"],"import React, { useContext } from 'react'\r\nimport { AuthContext } from './AuthProvider'\r\nimport ActionButton from './ActionButton'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SIGN_OUT } from '../graphql/Mutations'\r\n\r\nfunction Profile() {\r\n\r\n    const { setAuthInfo } = useContext(AuthContext)\r\n    const [signOutUser, { loading, error }] = useMutation(SIGN_OUT)\r\n\r\n    async function handleSignOut() {\r\n        await signOutUser()\r\n        setAuthInfo({ userData: undefined })\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"auth-headers\">\r\n            <h1 className='auth-header' >PROFILE</h1>\r\n        </div>\r\n        <div className=\"auth-section\">\r\n            <ActionButton buttonSize='btn--large' buttonStyle='btn--buy' onClick={handleSignOut}>Sign out</ActionButton>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Home.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Tours.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js",["65","66"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { GET_CART } from '../graphql/Queries'\r\nimport { PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport ActionButton from './ActionButton'\r\n\r\nfunction CartQuery() {\r\n\r\n    const [sizeArray, setSizeArray] = useState(['', 'btn--select', ''])\r\n    const [total, setTotal] = useState(0)\r\n    const scrollBoxCart = useRef(null)\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        if (data) {\r\n            data.allCart.forEach(cartEntry => {\r\n                total += cartEntry.quantity * cartEntry.price\r\n            })\r\n        }\r\n        setTotal(total.toFixed(2))\r\n    })\r\n\r\n    const { loading, error, data } = useQuery(GET_CART)\r\n\r\n    const [removeFromCart, \r\n        { loading: loadRemoveFromCart, error: errorRemoveFromCart }] = useMutation(REMOVE_FROM_CART, {\r\n        update: updateCartWithRemovedEntry\r\n    })\r\n\r\n    const [updateQuantity, \r\n        { loading: loadUpdateQuantity, error: errorUpdateQuantity }] = useMutation(UPDATE_QUANTITY, {\r\n            ignoreResults: true\r\n        })\r\n\r\n    const [purchaseCart, \r\n        { loading: loadPurchaseCart, error: errorPurchaseCart}] = useMutation(PURCHASE_CART, {\r\n            update: updateCartWithPurchase\r\n    })\r\n\r\n    function updateCartWithRemovedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.deleteCartItemById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithUpdatedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.updateCartItemQuantityById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithPurchase(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.purchaseCart.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function selectSize(size) {\r\n        let newSizeArray = ['', '', '']\r\n        newSizeArray[size] = 'btn--select'\r\n        setSizeArray(newSizeArray)\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var prevScrollTop = event.target.parentElement.parentElement.parentElement.scrollTop\r\n        var cartId = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        await removeFromCart({ variables: {\r\n            idProvided: cartId\r\n        }})\r\n        scrollBoxCart.current.scrollTop = prevScrollTop\r\n    }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    function purchaseMessage() {\r\n        purchaseCart()\r\n        alert(\"Purchase Completed\")\r\n    }\r\n\r\n    // Queries need to be handled better. It doesnt make sense to re-render everytime you change the quantity\r\n\r\n    if (loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (loadRemoveFromCart || loadUpdateQuantity) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    if (error && error.networkError) return <h1 className='empty-cart'>Server Offline</h1>\r\n    if (error && error.graphQLErrors) return <h1 className=\"empty-cart\">Log in to access cart</h1>\r\n    if (errorRemoveFromCart || errorUpdateQuantity) return <h1 className=\"empty-cart\">Error! ${JSON.stringify(error, errorRemoveFromCart, errorUpdateQuantity)}</h1>\r\n    if (data.allCart.length === 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n    if (loadPurchaseCart) return <h1>Test</h1>\r\n    if (errorPurchaseCart) return <h1>Test</h1>\r\n\r\n    return (\r\n        <>\r\n        <div ref={scrollBoxCart} className=\"scroll-box-cart\">\r\n            {data.allCart.map((product, index) => (\r\n                <div className=\"cart-products\"\r\n                key={index} data-key={product.id}>\r\n                    <div className=\"cart-product\">\r\n                        <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                        <span className=\"cart-name\">{product.name}</span>\r\n                    </div>\r\n                    <div className=\"cart-size\">\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[0]} onClick={() => selectSize(0)}>S</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[1]} onClick={() => selectSize(1)}>M</ActionButton>\r\n                        <ActionButton buttonStyle=\"btn--size\" buttonSize=\"btn--square\" select={sizeArray[2]} onClick={() => selectSize(2)}>L</ActionButton>\r\n                    </div>\r\n                    <div className=\"cart-quantity\">\r\n                        <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                        <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</ActionButton>\r\n                    </div>\r\n                    <span className=\"cart-price\">£{(product.price * product.quantity).toFixed(2)}</span>\r\n                </div>\r\n            ))}\r\n        </div>    \r\n        <div className=\"total-row\">\r\n            <span className=\"total-name\">Total</span>\r\n            <span className=\"total-price\">£{total}</span>\r\n            <ActionButton buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={purchaseMessage}>PURCHASE</ActionButton>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n",{"ruleId":"67","severity":1,"message":"68","line":7,"column":36,"nodeType":"69","messageId":"70","endLine":7,"endColumn":41},{"ruleId":"67","severity":1,"message":"71","line":2,"column":52,"nodeType":"69","messageId":"70","endLine":2,"endColumn":60},{"ruleId":"67","severity":1,"message":"72","line":9,"column":8,"nodeType":"69","messageId":"70","endLine":9,"endColumn":13},{"ruleId":"67","severity":1,"message":"73","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":14},{"ruleId":"67","severity":1,"message":"74","line":1,"column":27,"nodeType":"69","messageId":"70","endLine":1,"endColumn":37},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"67","severity":1,"message":"79","line":10,"column":27,"nodeType":"69","messageId":"70","endLine":10,"endColumn":34},{"ruleId":"67","severity":1,"message":"68","line":10,"column":36,"nodeType":"69","messageId":"70","endLine":10,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":13,"column":5,"nodeType":"69","endLine":13,"endColumn":14,"suggestions":"82"},{"ruleId":"67","severity":1,"message":"83","line":54,"column":14,"nodeType":"69","messageId":"70","endLine":54,"endColumn":40},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'HttpLink' is defined but never used.","'token' is assigned a value but never used.","'SignIn' is defined but never used.","'useContext' is defined but never used.","no-native-reassign",["84"],"no-negated-in-lhs",["85"],"'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["86"],"'updateCartWithUpdatedEntry' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Add dependencies array: [data]",{"range":"89","text":"90"},[729,729],", [data]"]