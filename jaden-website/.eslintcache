[{"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js":"1","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js":"2","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js":"3","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js":"4","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js":"5","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js":"6","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js":"7","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Home.js":"8","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Tours.js":"9"},{"size":259,"mtime":1609754433247,"results":"10","hashOfConfig":"11"},{"size":2583,"mtime":1609754433247,"results":"12","hashOfConfig":"11"},{"size":2441,"mtime":1609754433247,"results":"13","hashOfConfig":"11"},{"size":6274,"mtime":1611681312714,"results":"14","hashOfConfig":"11"},{"size":1251,"mtime":1611571700562,"results":"15","hashOfConfig":"11"},{"size":2426,"mtime":1611663951185,"results":"16","hashOfConfig":"11"},{"size":3138,"mtime":1611671464794,"results":"17","hashOfConfig":"11"},{"size":256,"mtime":1609754433247,"results":"18","hashOfConfig":"11"},{"size":1815,"mtime":1610991271397,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cyt81b",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Merch.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Chapter.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Navbar.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\CartQuery.js",["41","42","43","44","45"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_CART } from '../graphql/Queries'\r\nimport { PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport { Button } from './Button'\r\n\r\nfunction CartQuery() {\r\n\r\n    const [total, setTotal] = useState(0)\r\n\r\n    useEffect(() => {\r\n        let total = 0;\r\n        if (data) {\r\n            data.allCart.map(cartEntry => {\r\n                total += cartEntry.quantity * cartEntry.price\r\n            })\r\n        }\r\n        setTotal(total.toFixed(2))\r\n    })\r\n\r\n    const { loading, error, data } = useQuery(GET_CART)\r\n\r\n    const [removeFromCart, \r\n        { loading: loadRemoveFromCart, error: errorRemoveFromCart }] = useMutation(REMOVE_FROM_CART, {\r\n        update: updateCartWithRemovedEntry\r\n    })\r\n\r\n    const [updateQuantity, \r\n        { loading: loadUpdateQuantity, error: errorUpdateQuantity }] = useMutation(UPDATE_QUANTITY, {\r\n            ignoreResults: true\r\n        })\r\n\r\n    const [purchaseCart, \r\n        { loading: loadPurchaseCart, error: errorPurchaseCart}] = useMutation(PURCHASE_CART, {\r\n            update: updateCartWithPurchase\r\n    })\r\n\r\n    function updateCartWithRemovedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.deleteCartItemById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithUpdatedEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.updateCartItemQuantityById.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    function updateCartWithPurchase(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.purchaseCart.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    let refContainers = useRef([])\r\n\r\n    refContainers.current = [0,0,0].map(\r\n        (ref, index) => refContainers.current[index] = React.createRef()\r\n    )\r\n\r\n    function selectSize(size) {\r\n        for (var i = 0; i < refContainers.current.length; i++) {\r\n            refContainers.current[i].className = \"btn btn--size btn--square\"\r\n        }\r\n        refContainers.current[size].className = \"btn btn--size btn--square btn--select\"\r\n    }\r\n\r\n    async function removeProductFromCart(event) {\r\n        var cartId = event.target.parentElement.parentElement.parentElement.getAttribute('data-key')\r\n        await removeFromCart({ variables: {\r\n            idProvided: cartId\r\n        }})\r\n    }\r\n\r\n    function changeQuantity(event) {\r\n        var input = event.target\r\n        var id = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        console.log(id)\r\n        if (isNaN(input.value) || input.value <= 0) {\r\n            input.value = 1\r\n        } else { \r\n            input.value = Math.round(input.value)\r\n        }\r\n        updateQuantity({ variables: {\r\n            idProvided: id, newQuantity: parseInt(input.value)\r\n        }})\r\n    }\r\n\r\n    function purchaseMessage() {\r\n        purchaseCart()\r\n        alert(\"Purchase Completed\")\r\n    }\r\n\r\n    // Queries need to be handled better. It doesnt make sense to re-render everytime you change the quantity\r\n\r\n    if (loading) return <h1 className=\"empty-cart\">Loading...</h1>;\r\n    if (loadRemoveFromCart || loadUpdateQuantity) return <h1 className=\"empty-cart\">Removing From Cart...</h1>\r\n    if (error || errorRemoveFromCart || errorUpdateQuantity) return <h1 className=\"empty-cart\">Error! ${JSON.stringify(error, errorRemoveFromCart, errorUpdateQuantity)}</h1>\r\n    if (data.allCart.length == 0) return <h1 className=\"empty-cart\">Your cart is empty</h1>\r\n    if (loadPurchaseCart) return <h1>Test</h1>\r\n    if (errorPurchaseCart) return <h1>Test</h1>\r\n\r\n    return (\r\n        <>\r\n        <div className=\"scroll-box-cart\">\r\n            {data.allCart.map((product, index) => (\r\n                <div className=\"cart-products\"\r\n                key={index} data-key={product.id}>\r\n                    <div className=\"cart-product\">\r\n                        <img className=\"cart-image\" alt=\"Cart\" src={product.src}></img>\r\n                        <span className=\"cart-name\">{product.name}</span>\r\n                    </div>\r\n                    <div className=\"cart-size\">\r\n                        <Button ref={(Button) => refContainers.current[0] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(0)}>S</Button>\r\n                        <Button ref={(Button) => refContainers.current[1] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(1)}>M</Button>\r\n                        <Button ref={(Button) => refContainers.current[2] = Button} buttonStyle=\"btn--size\" buttonSize=\"btn--square\" onClick={() => selectSize(2)}>L</Button>\r\n                    </div>\r\n                    <div className=\"cart-quantity\">\r\n                        <input type=\"number\" value={product.quantity} onChange={changeQuantity}></input>\r\n                        <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={removeProductFromCart}>REMOVE</Button>\r\n                    </div>\r\n                    <span className=\"cart-price\">£{(product.price * product.quantity).toFixed(2)}</span>\r\n                </div>\r\n            ))}\r\n        </div>    \r\n        <div className=\"total-row\">\r\n            <span className=\"total-name\">Total</span>\r\n            <span className=\"total-price\">£{total}</span>\r\n            <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={purchaseMessage}>PURCHASE</Button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartQuery\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\graphql\\Mutations.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchCart.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React, { useState, useEffect, useRef, useMemo, useLayoutEffect } from 'react'\r\nimport './MerchCart.css'\r\nimport { Button } from './Button'\r\nimport MerchQuery from './MerchQuery'\r\nimport CartQuery from './CartQuery'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_MERCH, GET_CART } from '../graphql/Queries'\r\nimport { ADD_TO_CART, PURCHASE_CART, REMOVE_FROM_CART, UPDATE_QUANTITY } from '../graphql/Mutations'\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nfunction MerchCart() {\r\n\r\n    let x = 3\r\n\r\n    function checkMerchQuery() {\r\n        if (x == 4) {\r\n            return <h1 className=\"empty-cart\">Server Offline</h1>\r\n        } else {\r\n            return <MerchQuery />\r\n        }\r\n    }\r\n\r\n    function checkCartQuery() {\r\n        if (x == 4) {\r\n            return <h1 className=\"empty-cart\">Server Offline</h1>\r\n        } else {\r\n            return <CartQuery />\r\n        }\r\n    }\r\n\r\n    onError(({ graphQLErrors, networkError }) => {\r\n        if (graphQLErrors)\r\n            graphQLErrors.map(({ message, locations, path }) =>\r\n            console.log(\r\n                `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n            ),\r\n        );\r\n        if (networkError) console.log(`[Network error]: ${networkError}`);\r\n    });\r\n\r\n    // save scroll position\r\n\r\n    return (\r\n        <>\r\n        <div className=\"merch-background\">\r\n            <div className=\"merch-wrapper\">\r\n            <h1 className=\"merch-header\">MERCH</h1>\r\n                <div className=\"merch-section\">\r\n                    <div className=\"scroll-box-merch\">\r\n                        {checkMerchQuery()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"cart-background\">\r\n            <div className=\"cart-wrapper\">\r\n            <h1 className=\"cart-header\">CART</h1>\r\n                <div className=\"cart-section\">\r\n                    <div className=\"cart-headers\">\r\n                        <span className=\"cart-header-product\">PRODUCT</span>\r\n                        <span>SIZE</span>\r\n                        <span>QUANTITY</span>\r\n                        <span className=\"cart-header-price\">PRICE</span>\r\n                    </div>\r\n                        {checkCartQuery()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MerchCart\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\MerchQuery.js",["63","64","65","66"],"import React, { useRef, useMemo, useLayoutEffect } from 'react'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\r\nimport { GET_MERCH, GET_CART } from '../graphql/Queries'\r\nimport { ADD_TO_CART } from '../graphql/Mutations'\r\nimport { Button } from './Button'\r\n\r\nfunction MerchQuery() {\r\n\r\n    const { loading, error, data } = useQuery(GET_MERCH)\r\n    console.log(data)\r\n\r\n    const [addToCart,\r\n        { loading: loadAddToCart, error: errorAddToCart }] = useMutation(ADD_TO_CART, {\r\n        update: updateCartWithNewEntry\r\n    })\r\n\r\n    function updateCartWithNewEntry(cache, { data }) {\r\n        cache.modify({\r\n            fields: {\r\n                allCart() {\r\n                    const newCart = data.addToCart.cart\r\n                    cache.writeQuery({\r\n                        query: GET_CART,\r\n                        data: { newCart }\r\n                    })\r\n                }    \r\n            }\r\n        })\r\n    }\r\n\r\n    async function addToCartById(event) {\r\n        var merchId = event.target.parentElement.parentElement.getAttribute('data-key')\r\n        await addToCart({ variables: {\r\n            idProvided: merchId\r\n        }})\r\n    }\r\n\r\n    // const findFirstElementInViewPort = elements =>\r\n    // Array.prototype.find.call(\r\n    //   elements,\r\n    //   element => element.getBoundingClientRect().y >= 85 // nav height offset\r\n    // );\r\n\r\n    // // Ref to the container with elements\r\n    // const containerRef = useRef(null);\r\n\r\n    // const scrollTo = useMemo(() => {\r\n    //     // Find all elements in container which will be checked if are in view or not\r\n    //     const nodeElements = containerRef.current?.querySelectorAll(\"[data-item]\");\r\n    //     if (nodeElements) {\r\n    //         return findFirstElementInViewPort(nodeElements);\r\n    //     }\r\n    //     return undefined;\r\n    // }, [props.data]);\r\n\r\n    // useLayoutEffect(() => {\r\n    //     if (scrollTo) {\r\n    //         // Scroll to element with should be in view after rendering\r\n    //         scrollTo.scrollIntoView();\r\n    //         // Scroll by height of nav\r\n    //         window.scrollBy(0, -85);\r\n    //     }\r\n    // }, [scrollTo, props.data]);\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (loadAddToCart) return <h1 classname=\"empty-cart\">Adding To Cart...</h1>\r\n    if (error) return <h1>Error! {JSON.stringify(error)}</h1>\r\n    if (errorAddToCart) return <h1>Error! {JSON.stringify(errorAddToCart)}</h1>\r\n    if (data.allMerch.length === 0) return <h1 className=\"empty-cart\">Your Cart is Empty</h1>\r\n\r\n    return (\r\n        data.allMerch.map((merch, index) => (\r\n            <div className=\"merch-product\" key={index} data-key={merch.id} data-item=\"true\">\r\n                <img className=\"merch-image\" alt=\"Merch\" src={merch.src}></img>\r\n                <div className=\"merch-info\">\r\n                    <span>{merch.name}</span>\r\n                    <span>£{merch.price}</span>\r\n                </div>\r\n                <Button buttonStyle=\"btn--buy\" buttonSize=\"btn--medium\" onClick={addToCartById}>ADD TO CART</Button>\r\n            </div> \r\n        ))\r\n    )\r\n}\r\n\r\nexport default MerchQuery\r\n","C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\pages\\Home.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\Training\\Web Dev\\Jaden-Training\\jaden-website\\src\\components\\Tours.js",[],{"ruleId":"67","severity":1,"message":"68","line":2,"column":33,"nodeType":"69","messageId":"70","endLine":2,"endColumn":45},{"ruleId":"71","severity":1,"message":"72","line":11,"column":5,"nodeType":"69","endLine":11,"endColumn":14,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":14,"column":40,"nodeType":"76","messageId":"77","endLine":14,"endColumn":42},{"ruleId":"67","severity":1,"message":"78","line":52,"column":14,"nodeType":"69","messageId":"70","endLine":52,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":124,"column":29,"nodeType":"81","messageId":"82","endLine":124,"endColumn":31},{"ruleId":"67","severity":1,"message":"83","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"84","line":1,"column":27,"nodeType":"69","messageId":"70","endLine":1,"endColumn":36},{"ruleId":"67","severity":1,"message":"85","line":1,"column":38,"nodeType":"69","messageId":"70","endLine":1,"endColumn":44},{"ruleId":"67","severity":1,"message":"86","line":1,"column":46,"nodeType":"69","messageId":"70","endLine":1,"endColumn":53},{"ruleId":"67","severity":1,"message":"87","line":1,"column":55,"nodeType":"69","messageId":"70","endLine":1,"endColumn":70},{"ruleId":"67","severity":1,"message":"88","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":16},{"ruleId":"67","severity":1,"message":"89","line":6,"column":10,"nodeType":"69","messageId":"70","endLine":6,"endColumn":18},{"ruleId":"67","severity":1,"message":"90","line":6,"column":20,"nodeType":"69","messageId":"70","endLine":6,"endColumn":31},{"ruleId":"67","severity":1,"message":"68","line":6,"column":33,"nodeType":"69","messageId":"70","endLine":6,"endColumn":45},{"ruleId":"67","severity":1,"message":"91","line":7,"column":10,"nodeType":"69","messageId":"70","endLine":7,"endColumn":19},{"ruleId":"67","severity":1,"message":"92","line":7,"column":21,"nodeType":"69","messageId":"70","endLine":7,"endColumn":29},{"ruleId":"67","severity":1,"message":"93","line":8,"column":10,"nodeType":"69","messageId":"70","endLine":8,"endColumn":21},{"ruleId":"67","severity":1,"message":"94","line":8,"column":23,"nodeType":"69","messageId":"70","endLine":8,"endColumn":36},{"ruleId":"67","severity":1,"message":"95","line":8,"column":38,"nodeType":"69","messageId":"70","endLine":8,"endColumn":54},{"ruleId":"67","severity":1,"message":"96","line":8,"column":56,"nodeType":"69","messageId":"70","endLine":8,"endColumn":71},{"ruleId":"79","severity":1,"message":"80","line":16,"column":15,"nodeType":"81","messageId":"82","endLine":16,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":24,"column":15,"nodeType":"81","messageId":"82","endLine":24,"endColumn":17},{"ruleId":"67","severity":1,"message":"85","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":23},{"ruleId":"67","severity":1,"message":"86","line":1,"column":25,"nodeType":"69","messageId":"70","endLine":1,"endColumn":32},{"ruleId":"67","severity":1,"message":"87","line":1,"column":34,"nodeType":"69","messageId":"70","endLine":1,"endColumn":49},{"ruleId":"67","severity":1,"message":"68","line":2,"column":33,"nodeType":"69","messageId":"70","endLine":2,"endColumn":45},"no-unused-vars","'useLazyQuery' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["97"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'updateCartWithUpdatedEntry' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useMemo' is defined but never used.","'useLayoutEffect' is defined but never used.","'Button' is defined but never used.","'useQuery' is defined but never used.","'useMutation' is defined but never used.","'GET_MERCH' is defined but never used.","'GET_CART' is defined but never used.","'ADD_TO_CART' is defined but never used.","'PURCHASE_CART' is defined but never used.","'REMOVE_FROM_CART' is defined but never used.","'UPDATE_QUANTITY' is defined but never used.",{"desc":"98","fix":"99"},"Add dependencies array: [data]",{"range":"100","text":"101"},[618,618],", [data]"]